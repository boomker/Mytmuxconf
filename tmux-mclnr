#!/usr/bin/env python3
# *************************************************
#
#       Filename: tmux-mem-cpu-load
#         Author: Shingo
#          Email: gmboomker@gmail.com
#         Create: 2018-04-27 13:19:41
#       Description: -
#
# *************************************************

"""
Basic CPU & Memory Usage for Tmux

Author: Zaiste! <oh@zaiste.net>

Dash-meter inspired by tmux-mem-cpu
and code from psutil top.py.

From https://github.com/zaiste/tmuxified

Changes by Tony Narlock <tony@git-pull.com> at
https://github.com/tony/tmux-config.
"""

import time
import hsize
import os
import sys
import psutil


if os.name != 'posix':
    sys.exit('platform not supported')
elif os.uname()[0] == 'Darwin':
    # ostype = 'M'
    nictype = 'en0'
else:
    # ostype = 'L'
    nictype = 'eth0'


def get_dashes(perc):
    dashes = "|" * int((float(perc) / 10))
    empty_dashes = " " * (10 - len(dashes))
    return dashes, empty_dashes


# def bytes2human(n):
#     symbols = ('K', 'M', 'G', 'T', 'E')
#     prefix = {}
#     for i, s in enumerate(symbols):
#         prefix[s] = 1 << (i + 1) * 10
#     for s in reversed(symbols):
#         if n >= prefix[s]:
#             value = float(n) / prefix[s]
#             return '%.1f%sB' % (value, s)
#         if n <= 1024:
#             return '1KB'


def get_net_rate(D, U):
    net_recv_bytes = psutil.net_io_counters(pernic=True)[nictype][D]
    net_sent_bytes = psutil.net_io_counters(pernic=True)[nictype][U]
    time.sleep(1)
    sentinc = int(psutil.net_io_counters(pernic=True)[nictype][U]) - net_sent_bytes
    recvinc = int(psutil.net_io_counters(pernic=True)[nictype][D]) - net_recv_bytes
    nettatol_sentrate = "↑{0}/s".format(str(hsize.bytes2human(sentinc)))
    nettatol_recvrate = "↓{0}/s".format(str(hsize.bytes2human(recvinc)))
    return str(nettatol_recvrate), str(nettatol_sentrate)


def mem_cpu_info():
    mem = psutil.virtual_memory()
    if hasattr(mem, 'available'):
        # memused = mem.used - mem.cached
        memfree = mem.available
    # else:
        # memused = mem.used

    # cpu_dashes, cpu_empty_dashes = get_dashes(psutil.cpu_percent(interval=0.1))
    line = "%.1fGB/%.1fGB| %4s%%|" % (
        # cpu_dashes, cpu_empty_dashes,
        # str(hsize.bytes2human(memfree)),
        # str(hsize.bytes2human(mem.total)),
        float(memfree / 1024 / 1024 / 1024),
        float(mem.total / 1024 / 1024 / 1024),
        psutil.cpu_percent(interval=0.1),
    )

    return line


def main():
    print(mem_cpu_info(), get_net_rate(1, 0)[0], get_net_rate(1, 0)[1])
    # print(nettatol_recvrate, nettatol_sentrate)

    # print(mem_cpu_info())
        # print(str(get_net_rate(0)))
    # try:
        # print(mem_cpu_info(), str(increase / 1024))
    # except (KeyboardInterrupt, SystemExit):
    #     pass


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# *************************************************
#
#       Filename: tmux-monitor
#         Author: Shingo
#          Email: gmboomker@gmail.com
#         Create: 2018-04-27 13:19:41
#       Description: tmux monitor machine CPU/MEM etc.
#
# *************************************************

"""
Basic CPU & Memory Usage ,Network Download & Upload
rate and Basic disk info of usage for Tmux

Dash-meter inspired by tmux-monitor
and code from psutil top.py.

Changes by shingo <gmboomker@gmail.com> at
https://github.com/boomker/Mytmuxconf/tmuxmonitor/tmux-monitor
"""

import os
import psutil
import mhsize
import threading
# import sys
# import subprocess


if 'posix' not in os.name:
    # sys.exit('platform not supported')
    raise SystemExit('platform not supported')
elif 'Darwin' in os.uname()[0]:
    nictype = 'en0'
else:
    nictype = 'eth0'


'''
# 暂时弃用的function
def get_dashes(perc):
    dashes = "|" * int((float(perc) / 10))
    empty_dashes = " " * (10 - len(dashes))
    return dashes, empty_dashes
'''


def get_mem_cpu_info():
    mem = psutil.virtual_memory()
    memtotal = str(mhsize.bytes2human(mem.total, precision=0))
    memtv = int(memtotal[:-2])
    # 总内存的数值(tv), 总内存的单位(tu)
    memtu = memtotal[-2:]
    memtotal = "1GB" if memtv > 1000 and "MB" in memtu else memtotal
    # 对于大于1000M, 但是不满1G的，算1G
    if hasattr(mem, 'available'):
        # memused = mem.used - mem.cached
        memfree = mem.available
        memfree = str(mhsize.bytes2human(memfree))
    # else:
        # memused = mem.used

    cpuperc = psutil.cpu_percent(interval=1.0)
    global mcinfo
    mcinfo = "{0}/{1} {2}%".format(
        memfree, memtotal, cpuperc
    )
    # return line


def get_net_rate(D, U):
    import time
    net_recv_bytes = psutil.net_io_counters(pernic=True)[nictype][D]
    net_sent_bytes = psutil.net_io_counters(pernic=True)[nictype][U]
    time.sleep(1.0)
    net_srecv_bytes = psutil.net_io_counters(pernic=True)[nictype][D]
    net_ssent_bytes = psutil.net_io_counters(pernic=True)[nictype][U]
    sentinc = int(net_ssent_bytes) - net_sent_bytes
    recvinc = int(net_srecv_bytes) - net_recv_bytes
    nettatol_sentrate = "↑{0}/s".format(str(mhsize.bytes2human(sentinc)))
    nettatol_recvrate = "↓{0}/s".format(str(mhsize.bytes2human(recvinc)))
    global netrinfo
    netrinfo = "{0} {1}".format(nettatol_recvrate, nettatol_sentrate)
    # return ("{0} {1}".format(nettatol_recvrate, nettatol_sentrate))


def get_disk_info():
    import time
    rootpatusaperc = str(psutil.disk_usage('/').percent)
    # rootpartt = [i.device for i in psutil.disk_partitions() if i.mountpoint == '/']
    # rootpartt = str(rootpartt).strip("'[]").split('/')[2]
    # macdisk = "disk0"
    # rootpartt = macdisk if macdisk in rootpartt else rootpartt
    # frpwribytes = psutil.disk_io_counters(perdisk=True)[rootpartt][3]
    frpwribytes = psutil.disk_io_counters()[3]
    time.sleep(1.0)
    # srpwribytes = psutil.disk_io_counters(perdisk=True)[rootpartt][3]
    srpwribytes = psutil.disk_io_counters()[3]
    rpwbinc = mhsize.bytes2human(int(srpwribytes - frpwribytes))
    global diskinfo
    diskinfo = "D:[/:{0}% W↓:{1}/s]".format(
        rootpatusaperc, rpwbinc
    )
    # return diskinfo


def main():
    threads = []
    # for i in range(1):
    thread1 = threading.Thread(target=get_mem_cpu_info)
    thread2 = threading.Thread(target=get_net_rate, args=(1, 0))
    thread3 = threading.Thread(target=get_disk_info)
    thread1.start()
    threads.append(thread1)
    thread2.start()
    threads.append(thread2)
    thread3.start()
    threads.append(thread3)
    for thread in threads:
        thread.join()
    lineinfo = "MC:[{0}] N:[{1}] {2}".format(
        mcinfo,
        netrinfo,
        diskinfo,
    )
    print(lineinfo)


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# *************************************************
#
#       Filename: tmux-monitor
#         Author: Shingo
#          Email: gmboomker@gmail.com
#         Create: 2018-04-27 13:19:41
#       Description: -
#
# *************************************************

"""
Basic CPU & Memory Usage for Tmux

Author: Zaiste! <oh@zaiste.net>

Dash-meter inspired by tmux-mem-cpu
and code from psutil top.py.

From https://github.com/zaiste/tmuxified

Changes by Tony Narlock <tony@git-pull.com> at
https://github.com/tony/tmux-config.
"""
import os
import sys
import time
import psutil
import mhsize
import threading
# import subprocess


if os.name != 'posix':
    sys.exit('platform not supported')
elif os.uname()[0] == 'Darwin':
    # ostype = 'M'
    nictype = 'en0'
else:
    # ostype = 'L'
    nictype = 'eth0'


def get_dashes(perc):
    dashes = "|" * int((float(perc) / 10))
    empty_dashes = " " * (10 - len(dashes))
    return dashes, empty_dashes


def get_mem_cpu_info():
    mem = psutil.virtual_memory()
    memtotal = str(mhsize.bytes2human(mem.total, precision=0))
    memtn = int(memtotal[:-2])
    memtu = memtotal[-2:]
    memtotal = "1GB" if memtn > 1000 and "MB" in memtu else memtotal
    if hasattr(mem, 'available'):
        # memused = mem.used - mem.cached
        memfree = mem.available
        memfree = str(mhsize.bytes2human(memfree))
    # else:
        # memused = mem.used

    cpuperc = psutil.cpu_percent(interval=1.0)
    # cpu_dashes, cpu_empty_dashes = get_dashes(psutil.cpu_percent(interval=0.1))
    # line = "{0}/{1} {2}%".format(
    #     # cpu_dashes, cpu_empty_dashes,
    #     memfree, memtotal, cpuperc
    # )
    global mcinfo
    mcinfo = "{0}/{1} {2}%".format(
        # cpu_dashes, cpu_empty_dashes,
        memfree, memtotal, cpuperc
    )
    # return line


def get_net_rate(D, U):
    net_recv_bytes = psutil.net_io_counters(pernic=True)[nictype][D]
    net_sent_bytes = psutil.net_io_counters(pernic=True)[nictype][U]
    time.sleep(1.0)
    net_srecv_bytes = psutil.net_io_counters(pernic=True)[nictype][D]
    net_ssent_bytes = psutil.net_io_counters(pernic=True)[nictype][U]
    sentinc = int(net_ssent_bytes) - net_sent_bytes
    recvinc = int(net_srecv_bytes) - net_recv_bytes
    nettatol_sentrate = "↑{0}/s".format(str(mhsize.bytes2human(sentinc)))
    nettatol_recvrate = "↓{0}/s".format(str(mhsize.bytes2human(recvinc)))
    global netrinfo
    netrinfo = "{0} {1}".format(nettatol_recvrate, nettatol_sentrate)
    # return ("{0} {1}".format(nettatol_recvrate, nettatol_sentrate))


def get_disk_info():
    rootpatusaperc = str(psutil.disk_usage('/').percent)
    rootpartt = [i.device for i in psutil.disk_partitions() if i.mountpoint == '/']
    rootpartt = str(rootpartt).strip("'[]").split('/')[2]
    macdisk = "disk0"
    rootpartt = macdisk if macdisk in rootpartt else rootpartt
    frpwribytes = psutil.disk_io_counters(perdisk=True)[rootpartt][3]
    time.sleep(1.0)
    srpwribytes = psutil.disk_io_counters(perdisk=True)[rootpartt][3]
    rpwbinc = mhsize.bytes2human(int(srpwribytes - frpwribytes))
    global diskinfo
    diskinfo = "D:[/:{0}% W↓:{1}/s]".format(
        rootpatusaperc, rpwbinc
    )
    # return diskinfo


def main():
    # print(get_mem_cpu_info(), get_net_rate(1, 0))
    threads = []
    for i in range(1):
        thread1 = threading.Thread(target=get_mem_cpu_info)
        thread2 = threading.Thread(target=get_net_rate, args=(1, 0))
        thread3 = threading.Thread(target=get_disk_info)
        thread1.start()
        threads.append(thread1)
        thread2.start()
        threads.append(thread2)
        thread3.start()
        threads.append(thread3)
        for thread in threads:
            thread.join()
    lineinfo = "MC:[{0}] N:[{1}] {2}".format(
        mcinfo,
        netrinfo,
        diskinfo,
        # get_mem_cpu_info(),
        # get_net_rate(1, 0),
        # get_disk_info(),
    )
    print(lineinfo)
    # try:
        # print(get_mem_cpu_info(), str(increase / 1024))
    # except (KeyboardInterrupt, SystemExit):
    #     pass


if __name__ == '__main__':
    main()

#!/usr/bin/env python3


import os
import sys
import pwd
from subprocess import check_output as sco
import psutil

# sco = subprocess.check_output
curpath = os.path.dirname(os.path.realpath(__file__))
# payloadpath = curpath + "/tmux-monitor"
# 两字符串join，需要放到[列表中]
payloadpath = ''.join([curpath, "/tmux-monitor"])
# rolltxtscrp = ''.join([curpath, "/text_roll.sh"])
# tty = "ttys003"
tty = sco(['tmux', 'display', '-p', '#{pane_tty}'])
tty = str(tty, encoding='utf-8').strip('\n')
sshpara = sco(['/bin/ps', '-t', tty, '-o', 'command'])
sshpara = str(sshpara, encoding='utf-8').split('\n')
sshcmd = [str(i) for i in sshpara if 'ssh ' in i]
sshcmd = sshcmd[0] if len(sshcmd) != 0 else None

# if os.uname()[0] == 'Darwin':
if 'Ubuntu' in os.uname()[-2]:
    locnic_number = 0
else:
    locnic_number = 1


def colouroutput(username, hostaddr, **monitorvalue):
    colourprefix = ('fg=', 'bg=')
    f, b = colourprefix
    uhcolourdef = (',none', 'magenta,blink', 'default', 'colour148', 'colour24')
    none, fger, bger, fgd, bgd = uhcolourdef
    uhd = dict(un=username, ha=hostaddr, fgerr=f + fger, bgerr=b + bger,
               fgdtn=f + fgd + none, fgdt=f + fgd, bgdt=b + bgd)
    if "root" == username:
        print("#[{fgerr},{bgerr}]{un}#[{fgdtn},{bgdt}]@{ha}".format(**uhd))
        return
    elif username is not None and hostaddr is not None:
        print("#[{fgdt},{bgdt}]{un}#[{fgdt},{bgdt}]@{ha}".format(**uhd))
        return

    if len(monitorvalue['monitorvalue']) > 30:
        import re
        # re Module从这里开始使用，使用延迟加载模块的方式
        monitorvalue = [i for i in monitorvalue.values()][0]
        memcpu = re.split(r'(?<=])(\s+)', monitorvalue)[0]
        mcsl = re.split('(\s|])', memcpu)
        # ['memcpu:[1.7GB/8GB', ' ', '10.9%', ']', '']
        cpusageperc = float(re.split('(\s|])', memcpu)[2].strip('%'))
        # __import__('ipdb').set_trace()
        # mccup = re.search('(?<=\s)[\d+.\d+]+(?=%)', memcpu)

        net = re.split(r'(?<=])(\s+)', monitorvalue)[2]
        # netsl = re.split('(\[|\]| )', net)
        # netsection list
        netrateval = re.search('(?<=\[).*(?=\])', net).group(0)
        # netrate value
        # netr = sco('bash {0} "{1}"'.format(rolltxtscrp, netrv), shell=True)
        netl = netrateval .split(' ')[0]
        netr = netrateval.split(' ')[1]
        netlv = float(''.join(re.findall('(\d+|\.)', netl)))
        netrv = float(''.join(re.findall('(\d+|\.)', netr)))
        netr = "".strip(' ') if 0.0 == netrv else netr
        netl = "".strip(' ') if 0.0 == netlv else netl
        # 对于上传和下载网速显示都为"0.0"的，让其直接不显示啦!~
        netlsr = ''.join([netl, " ", netr])
        # leftsection + space + rightsection
        nlrl = len(''.join([netl, netr]))
        netsl = re.split('(\[|\]| )', net)
        ns1 = ''.join(netsl[0:2])
        ns23 = netlsr if nlrl == 0 or nlrl >= 16 else ''.join([netl, netr])
        ns4 = netsl[-2]

        disk = re.split(r'(?<=])(\s+)', monitorvalue)[-1]
        dinfl = re.split(r'(:|\s)+', disk)
        # ['D', ':', '[/', ':', '41.2%', ' ', 'W↓', ':', '0.0KB/s]']
        rootpartusageperc = float(re.split(r'(:|\s)+', disk)[4].strip('%'))
        dinf1 = ''.join(dinfl[0:4])
        dinf2 = dinfl[4]
        dinf3 = ''.join(dinfl[5:9])

        monitorcoldef = (',none', 'colour24', 'black', 'white',
                         'yellow,bright', 'magenta,bold,blink', 'default')
        none, fgmc, fgnet, fgdrv, cbgc, cfgerr, cdebg = monitorcoldef
        mond = dict(mcs=memcpu, cdebgc=b + cdebg, cerrfg=f + cfgerr, cbyb=b + cbgc,
                    mci1=mcsl[0], mci2=mcsl[2], mci3=mcsl[-2], mcfg=f + fgmc,
                    netfg=f + fgnet, nis=net, nis1=ns1, nis23=ns23, nis4=ns4,
                    dis=disk, drvfg=f + fgdrv, di1=dinf1, di2=dinf2, di3=dinf3,
                    mcfgn=f + fgmc + none, drvfgn=f + fgdrv + none)

        if cpusageperc > 85.0:
            mcis = "#[{mcfg},{cbyb}]{mci1} #[{cerrfg}," \
                "{cdebgc}]{mci2}#[{mcfgn},{cbyb}]{mci3}".format(**mond)
        elif cpusageperc == 0.0:
            mcis = "#[{mcfg},{cbyb}]{mci1}#[{mcfgn},{cbyb}]{mci3}".format(**mond)
        else:
            mcis = "#[{mcfg},{cbyb}]{mcs}".format(**mond)
        # cpu usage percent 大于85.0%的，状态栏闪烁数值;
        # 使用率为"0.0"的也直接不用显示出来了.
        # -------------------------------------------------------
        nets = '#[{netfg},{cbyb}]{nis1}{nis23}{nis4}'.format(**mond)
        # 网络下载上传这部分信息采用有数值就显示.
        # -------------------------------------------------------
        # root 分区使用率大于"80%"时，就在状态栏闪烁其值.
        if rootpartusageperc > 80.0:
            drvs = "#[{drvfg},{cbyb}]{di1} #[{cerrfg}," \
                "{cdebgc}]{di2}#[{drvfgn},{cbyb}]{di3}".format(**mond)
        else:
            drvs = "#[{drvfg},{cbyb}]{dis}".format(**mond)

        print("{0} {1} {2}".format(mcis, nets, drvs))


def get_remac_info(lrlocation):
    '''
    get remote machine info
    用来获取远程计算机信息的
    '''
    pyenv = "PYTHONIOENCODING=utf-8 python3"
    # 加上"PYTHONIOENCODING=utf-8", 为防止乱码或其他问题
    pyenvc = r"'PYTHONIOENCODING=utf-8 python3 -c"
    # "-c" 表示执行后面指定的字符串指令
    getuserpara = r'"import os;import pwd;' \
        'print(pwd.getpwuid(os.geteuid()).pw_name)"\\\''
    rsshusern = sco('{0} {1} {2}'.format(
        sshcmd, pyenvc, getuserpara), shell=True)
    rsshusern = str(rsshusern, encoding='utf-8').strip('\n')

    ''' sshipaddr = sco('ssh aecs \'PYTHONIOENCODING=utf-8 python3 -c "import \
    psutil;print(psutil.net_if_addrs()[\\"eth0\\"][0][1])"\'', shell=True)
    '''
    # __import__('ipdb').set_trace()
    # getipadpara = r'"import psutil;print(psutil.net_if_addrs()[\"eth0\"][0][1])"\\\''
    get_nic_name = r'"import psutil;' \
        'print(list(psutil.net_if_addrs().keys())[{0}])"\\\''.format(locnic_number)
    remote_nic_name = sco('{0} {1} {2}'.format(
        sshcmd, pyenvc, get_nic_name), shell=True)
    remote_nic_name = str(remote_nic_name, encoding='utf-8').strip('\n')
    getipadpara = r'"import psutil;' \
        'print(psutil.net_if_addrs()[\\"{0}\\"][0][1])"\\\''.format(remote_nic_name)
    # getipadpara = r'"import psutil;' \
    #     'print(psutil.net_if_addrs()[\\"eth0\\"][0][1])"\\\''
    reminsiip = sco('{0} {1} {2}'.format(
        sshcmd, pyenvc, getipadpara), shell=True)
    reminsiip = str(reminsiip, encoding='utf-8').strip('\n')
    if lrlocation == "left":
        colouroutput(rsshusern, reminsiip)
        # 调用上面colouroutput func
    else:
        rminfotmp = sco("{0} '{1}' < '{2}'".format(
            sshcmd, pyenv, payloadpath), shell=True)
        rminfo = str(rminfotmp, encoding='utf-8').strip('\n')
        colouroutput(None, None, monitorvalue=rminfo)


def main():
    sys.argv.append("")
    # 附加一个空格防止tmux.conf里没有配置参数("left"|"right")
    # side left or side right, 即获取tmux.conf里配置的参数
    slorsr = sys.argv[1]

    if sshcmd is not None:
        get_remac_info(slorsr)
        return

    if slorsr == "left":
        # username = os.getlogin()
        # 通过getlogin方法取用户名在有的系统(centos)会崩溃
        username = pwd.getpwuid(os.geteuid()).pw_name
        nic_name = list(psutil.net_if_addrs().keys())[locnic_number]
        hostaddr = psutil.net_if_addrs()[nic_name][0][1]
        colouroutput(username, hostaddr)
    else:
        mclnrinfo = sco("python3 {0}".format(payloadpath), shell=True)
        mclnrinfo = str(mclnrinfo, encoding='utf-8').strip('\n')
        # 通过sco获取命令行的输出结果是字节格式，需转成str
        colouroutput(None, None, monitorvalue=mclnrinfo)


if __name__ == "__main__":
    main()
